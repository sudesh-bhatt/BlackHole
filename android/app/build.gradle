plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

import java.util.Properties

// Load local.properties
def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

// Retrieve Flutter SDK path
def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

// Retrieve Flutter versioning information
def flutterVersionCode = localProperties.getProperty('flutter.versionCode')?.toInteger() ?: 1
def flutterVersionName = localProperties.getProperty('flutter.versionName') ?: "1.0"

// Apply Flutter Gradle script
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    // Define the namespace (required for AGP 7.0+)
    namespace 'com.shadow.blackhole'

    compileSdkVersion 34
    ndkVersion "26.1.10909125"

    defaultConfig {
        applicationId "com.shadow.blackhole"
        minSdk 24
        targetSdk flutter.targetSdkVersion
        versionCode flutterVersionCode
        versionName flutterVersionName

        // Specify Java compatibility
        compileOptions {
            sourceCompatibility JavaVersion.VERSION_17
            targetCompatibility JavaVersion.VERSION_17
        }

        kotlinOptions {
            jvmTarget = "17"
        }

        // Optionally, specify multiDex if your app requires it
        // multiDexEnabled true
    }

    buildTypes {
        release {
            // Use debug signing config for release builds (not recommended for production)
            signingConfig signingConfigs.debug
            shrinkResources false
            minifyEnabled false

            // To use a custom signing config, uncomment and configure below:
            /*
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            */
        }
    }

    buildFeatures {
        viewBinding true
    }

    sourceSets {
        main {
            java.srcDirs += 'src/main/kotlin'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.9.23"
    // Add other dependencies here
}

// Optionally load signing configs from key.properties
/*
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    android.signingConfigs {
        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
}
*/
